#!/bin/bash

# Copyright 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# generate /must-gather/version file
. version
echo "3scale/must-gather" > /must-gather/version
version >> /must-gather/version


BASE_COLLECTION_PATH="/must-gather"

# Auxiliary function that adds a k8s prefix to a resource
# $1: The prefix - e.g. "ns" or "pod"
# $2...$N: Resources
# Returns: The list of resources with the prefix prepended on them
#
# Example: addResourcePrefix pod a b c  => Returns: pod/a pod/b pod/c
function addResourcePrefix() {
  local result=""
  local prefix="${1}"
  shift

  for ns in $*; do
    result+="${prefix}/${ns} "
  done

  echo "${result}"
}

# Function that sorts and reduces a list to unique values
function unique() {
  local list="${1}"
  echo "${list[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '
}

# Get the namespaces of all API Managers in the cluster
function getAPIManagerNamespaces() {
  local result=()

  local namespaces=$(oc get APIManager --all-namespaces -o jsonpath='{.items[*].metadata.namespace}')
  for namespace in ${namespaces}; do
    result+=" ${namespace} "
  done

  echo "$(unique ${result})"
}

# Get the namespaces of all APIcasts in the cluster
function getAPIcastNamespaces() {
  local result=()

  local namespaces=$(oc get APIcast --all-namespaces -o jsonpath='{.items[*].metadata.namespace}')
  for namespace in ${namespaces}; do
    result+=" ${namespace} "
  done

  echo "$(unique ${result})"
}

# Get the APIcast deployments for a given namespace
function getAPIcastDeployments() {
  local namespace="${1}"
  local result=()

  local names=$(oc get deployment -n ${namespace} -l app=apicast,threescale_component=apicast -o jsonpath='{.items[*].metadata.name}')
  for name in ${names}; do
    result+=" ${name} "
  done

  echo "${result}"
}

function getNodes() {
  local result=()

  local names=$(oc get node -o jsonpath='{.items[*].metadata.name}')
  for name in ${names}; do
    result+=" ${name} "
  done

  echo "${result}"
}

# Function that fetches the APIcast configuration from a given resource
# $1: The namespace the resource is in
# $2: The resources name in type/name format (i.e. dc/apicast-staging)
# $3: The endpoint to call from the resource
# $4: The filename to write the output to
#
# Example: 
# 
# getAPIcastConfig 3scale dc/apicast-staging "\${THREESCALE_PORTAL_ENDPOINT}/production.json" apicast-production-portal.json
# 
# fetches config from the THREESCALE_PORTAL_ENDPOINT/production.json from inside of dc/apicast-staging and writes to apicast-production-portal.json
function getAPIcastConfig() {
  local namespace="${1}" # 
  local resource="${2}"
  local endpoint="${3}"
  local filename="${4}"
  local command="curl -X GET -H 'Accept: application/json' -k ${endpoint}"
  local collectionPath=${BASE_COLLECTION_PATH}/apicast-configs/${namespace}

  mkdir -p ${collectionPath}
  oc rsh -n ${namespace} ${resource} /bin/bash -c "${command}" > ${collectionPath}/${filename}
}

# Gets an environment variable from a resource
function getEnvironmentVariable() {
  local namespace=${1}
  local resource=${2}
  local variable=${3}

  oc rsh -T -n "${namespace}" "${resource}" /bin/bash -c "echo \${${variable}}"
}

# Gets the config portal endpoint based on the THREESCALE_PORTAL_ENDPOINT and THREESCALE_DEPLOYMENT_ENV values
function getConfigPortalEndpoint() {
  local namespace=${1}
  local resource=${2}

  local endpoint=$(getEnvironmentVariable ${namespace} ${resource} "THREESCALE_PORTAL_ENDPOINT")
  local environment=$(getEnvironmentVariable ${namespace} ${resource} "THREESCALE_DEPLOYMENT_ENV:-production")
  
  if  [[ "$endpoint" =~ .*"/master/api/proxy/configs"$ ]] ;
  then
    echo "${endpoint}/${environment}.json"
  else
    echo "${endpoint}/admin/api/services.json"
  fi
}

function main() {
  echo
  echo "Executing 3scale gather script"
  echo

  local apiManagerNamespaces=$(getAPIManagerNamespaces)
  local apiCastNamespaces=$(getAPIcastNamespaces)
  local nodes=$(getNodes)

  resources=$(addResourcePrefix ns "${apiManagerNamespaces}")
  resources+=$(addResourcePrefix ns "${apiCastNamespaces}")
  resources+=$(addResourcePrefix node "${nodes}")
  resources+="APIManager APIManagerBackup APIManagerRestore APIcast"
  resources=$(unique "${resources}")

  for resource in ${resources}; do
    echo
    echo "Dumping resource ${resource}..."
    oc adm inspect --all-namespaces "--dest-dir=${BASE_COLLECTION_PATH}" ${resource}
  done

  for namespace in ${apiManagerNamespaces}; do
    echo
    echo "Fetching APIcast configurations for ${namespace} namespace"

    getAPIcastConfig ${namespace} dc/apicast-staging "\${THREESCALE_PORTAL_ENDPOINT}/staging.json" apicast-staging-portal.json
    getAPIcastConfig ${namespace} dc/apicast-staging "http://localhost:8090/config" apicast-staging.json
    
    getAPIcastConfig ${namespace} dc/apicast-production "\${THREESCALE_PORTAL_ENDPOINT}/production.json" apicast-production-portal.json
    getAPIcastConfig ${namespace} dc/apicast-production "http://localhost:8090/config" apicast-production.json
  done

  for namespace in ${apiCastNamespaces}; do
    echo
    echo "Fetching APIcast configurations for ${namespace} namespace"

    local deployments="$(getAPIcastDeployments ${namespace})"
    for deployment in ${deployments}; do
      local endpoint=$(getConfigPortalEndpoint ${namespace} "deployment/${deployment}")

      getAPIcastConfig ${namespace} "deployment/${deployment}" "${endpoint}" ${deployment}-portal.json
      getAPIcastConfig ${namespace} "deployment/${deployment}" "http://localhost:8090/config" ${deployment}.json
    done
  done
  
  echo
  echo
  echo "Done"
  echo
}

main